input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5000
    codec => json_lines
  }
}

filter {
  # Parse container logs
  if [container] {
    mutate {
      add_field => { "log_source" => "container" }
    }
    
    # Parse JSON logs if possible
    if [log_message] =~ /^\{.*\}$/ {
      json {
        source => "log_message"
        target => "parsed_log"
      }
      
      if [parsed_log][level] {
        mutate {
          add_field => { "log_level" => "%{[parsed_log][level]}" }
        }
      }
      
      if [parsed_log][timestamp] {
        date {
          match => [ "[parsed_log][timestamp]", "ISO8601" ]
        }
      }
    }
  }
  
  # Parse application logs
  if [service] == "uml-api-service" {
    # Parse API service specific patterns
    grok {
      match => { 
        "log_message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:message}"
      }
      tag_on_failure => ["_grokparsefailure_api"]
    }
    
    # Extract request information
    if [message] =~ /HTTP/ {
      grok {
        match => { 
          "message" => "%{WORD:http_method} %{URIPATH:request_path} HTTP/%{NUMBER:http_version} %{NUMBER:status_code} %{NUMBER:response_time}"
        }
        tag_on_failure => ["_grokparsefailure_http"]
      }
      
      mutate {
        convert => { 
          "status_code" => "integer" 
          "response_time" => "float"
        }
      }
    }
    
    # Security event detection
    if [message] =~ /(?i)(attack|injection|xss|csrf|unauthorized|suspicious)/ {
      mutate {
        add_tag => ["security_event"]
        add_field => { "alert_level" => "high" }
      }
    }
    
    # Performance monitoring
    if [response_time] and [response_time] > 1000 {
      mutate {
        add_tag => ["slow_request"]
        add_field => { "performance_issue" => "slow_response" }
      }
    }
    
    # Error detection
    if [status_code] and [status_code] >= 400 {
      mutate {
        add_tag => ["error"]
      }
      
      if [status_code] >= 500 {
        mutate {
          add_tag => ["server_error"]
          add_field => { "alert_level" => "medium" }
        }
      }
    }
  }
  
  # Parse UI service logs
  if [service] == "uml-ui-service" {
    grok {
      match => { 
        "log_message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:message}"
      }
      tag_on_failure => ["_grokparsefailure_ui"]
    }
    
    # Client-side error detection
    if [message] =~ /(?i)(javascript error|uncaught|exception)/ {
      mutate {
        add_tag => ["client_error"]
        add_field => { "error_type" => "client_side" }
      }
    }
  }
  
  # Parse Kroki service logs
  if [service] == "kroki-service" {
    grok {
      match => { 
        "log_message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:message}"
      }
      tag_on_failure => ["_grokparsefailure_kroki"]
    }
    
    # Diagram generation monitoring
    if [message] =~ /diagram/ {
      mutate {
        add_tag => ["diagram_generation"]
      }
      
      if [message] =~ /(?i)(error|failed|timeout)/ {
        mutate {
          add_tag => ["generation_error"]
          add_field => { "alert_level" => "medium" }
        }
      }
    }
  }
  
  # Common processing
  date {
    match => [ "timestamp", "ISO8601" ]
  }
  
  # GeoIP processing for client IPs
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
  
  # User agent parsing
  if [user_agent] {
    useragent {
      source => "user_agent"
      target => "ua"
    }
  }
  
  # Add environment information
  mutate {
    add_field => { 
      "environment" => "${ENVIRONMENT:production}"
      "processed_at" => "%{@timestamp}"
    }
  }
  
  # Remove unwanted fields
  mutate {
    remove_field => [ 
      "beat", 
      "input", 
      "agent",
      "ecs",
      "host",
      "input_type"
    ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "uml-service-%{+YYYY.MM.dd}"
    template_name => "uml-service"
    template => "/usr/share/logstash/templates/uml-service-template.json"
    template_overwrite => true
  }
  
  # Send alerts to different indices
  if "security_event" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "uml-security-alerts-%{+YYYY.MM.dd}"
    }
  }
  
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "uml-errors-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug output (comment out in production)
  # stdout { 
  #   codec => rubydebug 
  # }
}