name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies - API Service
        working-directory: ./api-service
        run: npm ci

      - name: Install dependencies - UI Service
        working-directory: ./ui-service
        run: npm ci

      - name: Lint API Service
        working-directory: ./api-service
        run: |
          npx eslint . --ext .js --format json --output-file eslint-report-api.json || true
          npx eslint . --ext .js

      - name: Lint UI Service
        working-directory: ./ui-service
        run: |
          npx eslint . --ext .js --format json --output-file eslint-report-ui.json || true
          npx eslint . --ext .js

      - name: Run Prettier Check
        run: |
          npx prettier --check "**/*.{js,json,md}" || true

      - name: Upload lint reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lint-reports
          path: |
            api-service/eslint-report-api.json
            ui-service/eslint-report-ui.json

  # Security Scanning
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies - API Service
        working-directory: ./api-service
        run: npm ci

      - name: Install dependencies - UI Service
        working-directory: ./ui-service
        run: npm ci

      - name: Run npm audit - API Service
        working-directory: ./api-service
        run: |
          npm audit --audit-level=moderate --json > npm-audit-api.json || true
          npm audit --audit-level=moderate

      - name: Run npm audit - UI Service
        working-directory: ./ui-service
        run: |
          npm audit --audit-level=moderate --json > npm-audit-ui.json || true
          npm audit --audit-level=moderate

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-report.json

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            api-service/npm-audit-api.json
            ui-service/npm-audit-ui.json
            snyk-report.json

  # Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies - API Service
        working-directory: ./api-service
        run: npm ci

      - name: Install dependencies - UI Service
        working-directory: ./ui-service
        run: npm ci

      - name: Run API Service tests
        working-directory: ./api-service
        run: |
          npm test -- --coverage --watchAll=false --ci --testResultsProcessor="jest-junit"
        env:
          JEST_JUNIT_OUTPUT_DIR: ./test-results
          JEST_JUNIT_OUTPUT_NAME: api-results.xml

      - name: Run UI Service tests
        working-directory: ./ui-service
        run: |
          npm test -- --coverage --watchAll=false --ci --testResultsProcessor="jest-junit"
        env:
          JEST_JUNIT_OUTPUT_DIR: ./test-results
          JEST_JUNIT_OUTPUT_NAME: ui-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            api-service/coverage/
            ui-service/coverage/
            api-service/test-results/
            ui-service/test-results/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./api-service/coverage/
          flags: api-service
          name: api-service-node-${{ matrix.node-version }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./ui-service/coverage/
          flags: ui-service
          name: ui-service-node-${{ matrix.node-version }}

  # Docker Build and Test
  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for API Service
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for UI Service
        id: meta-ui
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ui-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build API Service image
        uses: docker/build-push-action@v5
        with:
          context: ./api-service
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ fromJSON(steps.meta-api.outputs.json).created }}
            VCS_REF=${{ github.sha }}

      - name: Build UI Service image
        uses: docker/build-push-action@v5
        with:
          context: ./ui-service
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-ui.outputs.tags }}
          labels: ${{ steps.meta-ui.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ fromJSON(steps.meta-ui.outputs.json).created }}
            VCS_REF=${{ github.sha }}

      - name: Run Trivy vulnerability scanner - API Service
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-service:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-api-results.sarif'

      - name: Run Trivy vulnerability scanner - UI Service
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ui-service:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-ui-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-api-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-ui-results.sarif'

  # End-to-End Testing
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 30

      - name: Wait for services to be ready
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:9001/health; do sleep 2; done'
          timeout 120 bash -c 'until curl -f http://localhost:9002/health; do sleep 2; done'
          timeout 120 bash -c 'until curl -f http://localhost:8001/health; do sleep 2; done'

      - name: Run health check script
        run: |
          chmod +x ./scripts/health-check.sh
          ./scripts/health-check.sh

      - name: Install Playwright dependencies
        run: |
          npm install -g @playwright/test
          npx playwright install --with-deps

      - name: Run Playwright E2E tests
        run: |
          npx playwright test --config=e2e/playwright.config.js
        env:
          API_URL: http://localhost:9001
          UI_URL: http://localhost:9002

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

      - name: Collect service logs
        if: failure()
        run: |
          docker-compose logs > service-logs.txt
          docker-compose ps

      - name: Upload service logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: service-logs
          path: service-logs.txt

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Performance Testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [e2e-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 30

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          k6 run tests/performance/load-test.js
        env:
          API_URL: http://localhost:9001
          UI_URL: http://localhost:9002

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: performance-results/

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Generate Reports
  generate-reports:
    name: Generate CI Reports
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, test, docker-build, e2e-test]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate CI summary report
        run: |
          cat > ci-summary.md << 'EOF'
          # CI/CD Pipeline Summary
          
          ## Build Information
          - **Repository**: ${{ github.repository }}
          - **Branch**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}
          - **Trigger**: ${{ github.event_name }}
          - **Actor**: ${{ github.actor }}
          - **Timestamp**: ${{ github.event.head_commit.timestamp }}
          
          ## Job Status
          - **Code Quality**: ${{ needs.code-quality.result }}
          - **Security Scan**: ${{ needs.security-scan.result }}
          - **Tests**: ${{ needs.test.result }}
          - **Docker Build**: ${{ needs.docker-build.result }}
          - **E2E Tests**: ${{ needs.e2e-test.result }}
          
          ## Artifacts Generated
          - Lint reports
          - Security scan reports
          - Test coverage reports
          - Docker vulnerability scans
          - E2E test results
          
          ## Next Steps
          - Review any failing checks
          - Address security vulnerabilities
          - Ensure test coverage meets requirements
          - Monitor deployment pipeline
          EOF

      - name: Upload CI summary
        uses: actions/upload-artifact@v3
        with:
          name: ci-summary
          path: ci-summary.md

      - name: Comment PR with summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('ci-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });